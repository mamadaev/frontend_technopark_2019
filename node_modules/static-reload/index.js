
const WebSocket = require('ws')
const fs = require('fs')
const path = require('path')
const mime = require('mime-types')
const http = require('http')
const noop = _ => {}

exports.start = (server, options) => {
  if (!options) options = {}

  const entry = path.resolve(options.entry)
  const onreload = options.onreload || noop
  const oninject = options.oninject || noop

  server.on('request', ({ url }, res) => {
    let filePath = path.join(entry, url)

    if (url === '/') {
      filePath += '/index.html'
    } else if (!path.extname(filePath)) {
      filePath += '.html'
    }

    let { address, port } = server.address()
    let type = mime.lookup(filePath)

    res.setHeader('Transfer-Encoding', 'chunked')
    res.setHeader('Content-Type', type)

    const send = code => {
      res.setHeader('Content-Type', 'text/plain')
      res.statusCode = code
      res.end(`${code} ${http.STATUS_CODES[code]}`)
    }

    if (type === 'text/html') {
      if (address === '::') address = 'localhost'

      return fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) return send(400)

        const point = data.lastIndexOf('</body>')
        res.end(`${data.slice(0, point)}<script>new WebSocket('ws://${address}:\
${port}').onmessage=function(){location.reload()}</script>${data.slice(point)}`,
          () => oninject(filePath)
        )
      })
    }

    fs.createReadStream(filePath)
    .on('error', err => {
      if (url === '/favicon.ico') {
        res.setHeader('Content-Type', 'image/png')
        fs.createReadStream(__dirname + '/favicon.png')
        .pipe(res)
      } else {
        send(400)
        console.error(`${err.name}: ${err.message}`)
      }
    })
    .pipe(res)
  })

  const wss = new WebSocket.Server({ server, clientTracking: true })

  wss.on('connection', client => {
    client.on('message', data => {
      for (const peer of wss.clients) {
        if (peer !== client) peer.send('')
      }
      onreload()
    })
  })
}

exports.reload = options => {
  if (typeof options.address === 'function') {
    options = options.address()
  }

  const { port, address } = options
  const ws = new WebSocket(`ws://${address}:${port}`)
  ws.on('open', () => ws.send('', () => ws.close()))
}
